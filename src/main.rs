use std::fs::File;
use std::io::{self, Write, BufRead};
use std::path::Path;
use std::process::Command;

mod parser;
use parser::{parse_outline_url, ShadowsocksConfig};

fn write_config_file(config: &ShadowsocksConfig, path: &Path) {
    let json = serde_json::json!({
        "server": config.server,
        "server_port": config.port,
        "password": config.password,
        "method": config.method,
        "local_address": "127.0.0.1",
        "local_port": 1080,
        "timeout": 300
    });

    let mut file = File::create(path).expect("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª");
    file.write_all(json.to_string().as_bytes())
        .expect("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª");
}

fn main() {
    println!("üß∑ –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (ss://...):");

    let stdin = io::stdin();
    let mut input = String::new();

    stdin.lock().read_line(&mut input).expect("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞");
    let input = input.trim();

    match parse_outline_url(input) {
        Ok(config) => {
            println!("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ:");
            println!("  –°–µ—Ä–≤–µ—Ä: {}:{}", config.server, config.port);
            println!("  –ú–µ—Ç–æ–¥: {}", config.method);

            let config_path = Path::new("ss_config.json");
            write_config_file(&config, config_path);

            println!("üöÄ –ó–∞–ø—É—Å–∫ sslocal –Ω–∞ –ø–æ—Ä—Ç—É 1080...");

            let status = Command::new("sslocal")
                .args(&["-c", config_path.to_str().unwrap()])
                .status()
                .expect("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å sslocal");

            if !status.success() {
                eprintln!("‚ùå sslocal –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.");
            }
        }
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", e);
        }
    }
}
