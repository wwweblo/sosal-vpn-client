use base64::{engine::general_purpose, Engine as _};

#[derive(Debug)]
pub struct ShadowsocksConfig {
    pub method: String,
    pub password: String,
    pub server: String,
    pub port: u16,
}

fn base64_decode_padded(input: &str) -> Result<Vec<u8>, base64::DecodeError> {
    let mut s = input.to_string();
    while s.len() % 4 != 0 {
        s.push('=');
    }
    general_purpose::STANDARD.decode(&s)
}

pub fn parse_outline_url(ss_url: &str) -> Result<ShadowsocksConfig, String> {
    println!("üîç –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {}", ss_url);

    let url_str = ss_url
        .strip_prefix("ss://")
        .ok_or("–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ss://")?;
    println!("üîß –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ ss:// => {}", url_str);

    let (encoded, rest) = url_str
        .split_once('@')
        .ok_or("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç—å '@' ‚Äî —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å base64@host")?;

    println!("üß™ base64 —á–∞—Å—Ç—å: {}", encoded);
    println!("üåê –∞–¥—Ä–µ—Å–Ω–∞—è —á–∞—Å—Ç—å: {}", rest);

    let decoded_bytes = base64_decode_padded(encoded)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {}", e))?;

    let decoded_str = String::from_utf8(decoded_bytes)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8: {}", e))?;

    println!("üîì –†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ: '{}'", decoded_str);

    if !decoded_str.contains(':') {
        return Err("‚ùóÔ∏è –í decoded —Å—Ç—Ä–æ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ':' ‚Äî –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç".into());
    }

    let (method, password) = decoded_str
        .split_once(':')
        .ok_or("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ –∏ –ø–∞—Ä–æ–ª—å")?;

    println!("üîë –ú–µ—Ç–æ–¥: {}", method);
    println!("üîë –ü–∞—Ä–æ–ª—å: {}", password);

    // –û—á–∏—â–∞–µ–º query –∏ fragment (–≤—Å—ë –ø–æ—Å–ª–µ ? –∏–ª–∏ #)
    let mut address_cleaned = rest;
    if let Some((a, _)) = rest.split_once('?') {
        address_cleaned = a;
    } else if let Some((a, _)) = rest.split_once('#') {
        address_cleaned = a;
    }
    // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —Å–ª—ç—à, –µ—Å–ª–∏ –µ—Å—Ç—å
    address_cleaned = address_cleaned.strip_suffix('/').unwrap_or(address_cleaned);

    println!("üì¶ –û—á–∏—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {}", address_cleaned);

    let (host, port_str) = address_cleaned
        .split_once(':')
        .ok_or("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç")?;

    let port = port_str
        .parse::<u16>()
        .map_err(|e| format!("–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {}", e))?;

    println!("üì° –•–æ—Å—Ç: {}, –ü–æ—Ä—Ç: {}", host, port);

    Ok(ShadowsocksConfig {
        method: method.to_string(),
        password: password.to_string(),
        server: host.to_string(),
        port,
    })
}
